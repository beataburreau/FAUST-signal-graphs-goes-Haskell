-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SigDot.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified SigDot.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transID :: SigDot.Abs.ID -> Result
transID x = case x of
  SigDot.Abs.ID string -> failure x

transDotGraph :: SigDot.Abs.DotGraph -> Result
transDotGraph x = case x of
  SigDot.Abs.GDef gkind id stmts -> failure x

transStmt :: SigDot.Abs.Stmt -> Result
transStmt x = case x of
  SigDot.Abs.SNode id attrs -> failure x
  SigDot.Abs.SEdge id1 id2 attrs -> failure x
  SigDot.Abs.SAttr kind attrs -> failure x
  SigDot.Abs.SSoloAttr attr -> failure x

transAttr :: SigDot.Abs.Attr -> Result
transAttr x = case x of
  SigDot.Abs.ARegular akind string -> failure x
  SigDot.Abs.AID akind id -> failure x

transAKind :: SigDot.Abs.AKind -> Result
transAKind x = case x of
  SigDot.Abs.AFontsize -> failure x
  SigDot.Abs.ARankdir -> failure x
  SigDot.Abs.ALabel -> failure x
  SigDot.Abs.AColor -> failure x
  SigDot.Abs.AFillcolor -> failure x
  SigDot.Abs.AStyle -> failure x
  SigDot.Abs.AShape -> failure x

transKind :: SigDot.Abs.Kind -> Result
transKind x = case x of
  SigDot.Abs.KNode -> failure x
  SigDot.Abs.KEgde -> failure x
  SigDot.Abs.KGraph -> failure x

transGKind :: SigDot.Abs.GKind -> Result
transGKind x = case x of
  SigDot.Abs.GKDi -> failure x
  SigDot.Abs.GKSub -> failure x
